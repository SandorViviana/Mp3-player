$version 12.05

$rect <10,10,210,50>
$variant SimulationProfile
vclass Application : Application::Application
{
  $rect <-10,499,190,539>
  inherited property Bounds = <0,0,1600,480>;

  $rect <20,20,160,60>
  object WidgetSet::HorizontalSlider DurationSlider
  {
    preset Bounds = <856,157,1056,207>;
    preset Outlet = ^Duration;
    preset MaxValue = 500;
    preset CurrentValue = 1;
    preset Appearance = WidgetSet::HorizontalSlider_Medium;
  }

  $rect <20,20,160,60>
  object WidgetSet::HorizontalSlider CurrentTimeSlider
  {
    preset Bounds = <858,218,1058,268>;
    preset Outlet = ^CurrentTime;
    preset MaxValue = 100;
    preset Appearance = WidgetSet::HorizontalSlider_Medium;
  }

  $rect <1690,139,1890,179>
  property int32 CurrentTime;

  $rect <1690,179,1890,219>
  onset CurrentTime
  {
    // The value doesn't change - nothing to do.
    if ( pure CurrentTime == value )
      return;

    // Remember the property's new value.
    pure CurrentTime = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
    Application::Device.UpdateCurrentTime( value );
  }

  $rect <1690,219,1890,259>
  onget CurrentTime
  {
    return pure CurrentTime;
  }

  $rect <1920,141,2120,181>
  property int32 Duration;

  $rect <1920,181,2120,221>
  onset Duration
  {
    // The value doesn't change - nothing to do.
    if ( pure Duration == value )
      return;

    // Remember the property's new value.
    pure Duration = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
    Application::Device.UpdateDuration( value );
    CurrentTimeSlider.MaxValue=value;

  }

  $rect <1920,221,2120,261>
  onget Duration
  {
    return pure Duration;
  }

  $rect <1690,-10,1890,30>
  inherited method Init()
  {
    attachobserver OnCurrentTimeUpdate, ^Application::Device.CurrentTime;
    attachobserver OnDurationUpdate, ^Application::Device.Duration;
    Duration=100;


  }

  $rect <1699,310,1899,350>
  slot OnCurrentTimeUpdate
  {
     CurrentTimeSlider.CurrentValue=Application::Device.CurrentTime;
  }

  $rect <1920,310,2120,350>
  slot OnDurationUpdate
  {
    DurationSlider.CurrentValue=Application::Device.Duration;
  }

  $rect <20,20,160,60>
  object Views::Text DurationLabel
  {
    preset Bounds = <1059,168,1192,199>;
    preset String = "Duration";
    preset Font = Resources::FontMedium;
  }

  $rect <20,20,160,60>
  object Views::Text CurrentTimeLabel
  {
    preset Bounds = <1062,227,1195,258>;
    preset String = "Current Time";
    preset Font = Resources::FontMedium;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member DurationSlider
  $member CurrentTimeSlider
  $member CurrentTime
  $member OnSetCurrentTime
  $member OnGetCurrentTime
  $member Duration
  $member OnSetDuration
  $member OnGetDuration
  $member OnCurrentTimeUpdate
  $member OnDurationUpdate
  $member DurationLabel
  $member CurrentTimeLabel
}

$rect <10,50,210,90>
$variant SimulationProfile
vclass DeviceClass : Application::DeviceClass
{
  $rect <290,-20,490,20>
  inherited method Play()
  {
    PlayEffect.Value1 = CurrentTime;
    //PlayEffect.Value1=0;
    //PlayEffect.Value=CurrentTime;
    PlayEffect.Value2 = Duration;
    PlayEffect.CycleDuration = (Duration-CurrentTime) * 1000;
    this.UpdatePlayerState( Application::State.Playing);
    signal PlayEffect.StartEffect;

  }

  $rect <0,40,200,80>
  object Effects::Int32Effect PlayEffect
  {
    preset OnFinished = OnFinishEffect;
    preset OnAnimate = OnPlayEffect;
    preset NoOfCycles = 1;
    preset Value2 = 255;
    preset Value1 = 0;
  }

  $rect <0,80,200,120>
  slot OnPlayEffect
  {
     isPlayEffect = true;
    UpdateCurrentTime(PlayEffect.Value);
     isPlayEffect = false;
  }

  $rect <279,20,479,60>
  inherited method Pause()
  {
    this.UpdatePlayerState( Application::State.Paused);
    signal PlayEffect.StopEffect;
  }

  $rect <380,160,580,200>
  inherited method IntToTimeString()
  {
    return (string)(aArg1/60)+":"+(string)(aArg1%60);
  }

  $rect <279,100,479,140>
  inherited method UpdateTimeFromSlider()
  {
    UpdateCurrentTime(aArg1);

  }

  $rect <279,60,479,100>
  inherited method LoopTrack()
  {
    this.Loop=!this.Loop;
    if(Loop)
    {   
        
        trace "OnLoop";
    }
    else 
    {
        trace "NotOnLoopAnymore";

    }

  }

  $rect <0,120,200,160>
  slot OnFinishEffect
  {
    if(this.Loop)
    {   
        UpdateCurrentTime(0);
        //PlayEffect.Value1=0;
        //signal PlayEffect.StartEffect;
        this.Play();
    }
    else
    {
        this.UpdatePlayerState( Application::State.Ended);
    }

  }

  $rect <500,60,700,100>
  inherited method UpdateDuration()
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure Duration )
    {
      trace "update Duration from ", pure Duration, " to ", aNewValue;
      // Remember the new value in the internal memory of the property.
      pure Duration = aNewValue;
       
      PlayEffect.Value2=aNewValue;       
      // Notify all associated property observers.
      notifyobservers ^Duration;
      notifyobservers null, 124;
      }
     
  }

  $rect <500,100,700,140>
  inherited method UpdateCurrentTime()
  {
    if( !isPlayEffect && this.PlayerState==Application::State.Playing ) 
      signal PlayEffect.StopEffect;

    super(aNewValue);

    if( !isPlayEffect && this.PlayerState==Application::State.Playing )
       this.Play();

  }

  $rect <0,-20,200,20>
  var bool isPlayEffect = false;

  $rect <740,49,940,89>
  inherited method GetTitleById()
  {
    switch ( aArg1 )
    {
                case 0 : return "Introduction et Rondo Capriccioso";
                case 1 : return "Clair de Lune";
                case 2 : return "String Quartet No. 2 (2nd mvt)";
                case 3 :  return "Night on bald mountain";
                case 4 : return "Tempo di Valse";
                case 5 : return "Infernal Dance of Kastchei";
                case 6: return "Vltava";
                case 7: return "The Call";
                default : return "Unknown";
    }
  }

  $rect <740,9,940,49>
  inherited method GetArtistById()
  {
    switch ( aArg1 )
    {
      case 0 : return "Camille Saint-Saens";
      case 1 : return "Claude Debussy";
      case 2 : return "Bela Bartok";
      case 3 : return "Modest Mussorgsky";
      case 4 : return "Antonin Dvorak";
      case 5: return "Igor Stravinsky";
      case 6: return "Bedrich Smetana";
      case 7: return "Stereohada";
      default : return "Unknown";
    }
  }

  $rect <740,89,940,129>
  inherited method GetSongById()
  {
    return "song url for " + (string)aArg1;
  }

  $rect <740,128,940,168>
  inherited method GetSizeOfList()
  {
    return 8;
  }

  // Simulation effects
  note group Note
  {
    attr Bounds = <-30,-70,250,180>;
  }

  // Overridden functions
  note group Note1
  {
    attr Bounds = <260,-80,990,240>;
  }

  // Data section
  note group Note2
  {
    attr Bounds = <720,-30,970,190>;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member IntToTimeString
  $member Play
  $member LoopTrack
  $member UpdateCurrentTime
  $member UpdateTimeFromSlider
  $member UpdateDuration
  $member Pause
  $member GetTitleById
  $member GetArtistById
  $member GetSongById
  $member PlayEffect
  $member OnPlayEffect
  $member GetSizeOfList
  $member OnFinishEffect
  $member isPlayEffect
  $member Note
  $member Note1
  $member Note2

  // Directives to adapt the order of members belonging to this class so they appear 
  // correctly arranged relative to the members inherited from the ancestor (super) 
  // classes. The numbers indicate the order-displacement to apply on the respective 
  // member once all members have been loaded and combined with members from the 
  // ancestor classes.
  $reorder LoopTrack 1
  $reorder UpdatePlayerState 1
  $reorder UpdateCurrentTime 1
  $reorder UpdateTimeFromSlider 1
  $reorder UpdateDuration 1
  $reorder InitSlot 1
  $reorder PlayEffect 1
  $reorder OnPlayEffect 1
}
